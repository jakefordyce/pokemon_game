local game_state = require "common/game_state"
local moves = require "common/moves"
local types = require "common/poke_types"
local selected_mon = nil
local selected_move_id = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("move_panel"), false)
end

function final(self)
end

function update(self, dt)

end

function on_message(self, message_id, message, sender)
	if message_id == hash("mon_selected") then
		selected_mon = game_state.pokemon[message.mon]
	elseif message_id == hash("move_selected") then
		selected_move_id = message.move_id
		display_move_upgrade_details()
		gui.set_enabled(gui.get_node("move_panel"), true)
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		if(gui.pick_node(gui.get_node("confirm_button"),action.x,action.y) and node_enabled(gui.get_node("confirm_button"))) then
			return true
		elseif(gui.pick_node(gui.get_node("cancel_button"),action.x,action.y) and node_enabled(gui.get_node("cancel_button"))) then
			return true
		elseif(gui.pick_node(gui.get_node("close_button"),action.x,action.y) and node_enabled(gui.get_node("close_button"))) then
			return true
		end
	elseif(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("confirm_button"),action.x,action.y) and node_enabled(gui.get_node("confirm_button"))) then
			try_upgrade_move()
			return true
		elseif(gui.pick_node(gui.get_node("cancel_button"),action.x,action.y) and node_enabled(gui.get_node("cancel_button"))) then
			gui.set_enabled(gui.get_node("move_panel"), false)
			selected_move_id = nil
			msg.post("move_tutor", "cancel_upgrade")
			return true
		elseif(gui.pick_node(gui.get_node("close_button"),action.x,action.y) and node_enabled(gui.get_node("close_button"))) then
			if selected_mon == nil then
				msg.post("main:/loader#main", "close_move_tutor")
			elseif selected_mon ~= nil and selected_move_id == nil then
				selected_mon = nil
				msg.post("move_tutor", "reselect_pokemon")
			end
			return true
		end
	end
end

function on_reload(self)
end

function display_move_upgrade_details()
	local move = moves[selected_move_id]
	local known_move = {}
	for i, km in ipairs(selected_mon.known_moves) do
		if km.id == selected_move_id then
			known_move = km
		end
	end
	gui.set_text(gui.get_node("move_name"), move.name)
	gui.set_text(gui.get_node("move_level"), "Level "..known_move.level.."/"..move.max_level)
	gui.play_flipbook(gui.get_node("move_type"), "type_"..types[move.type].name.."_16")
	gui.set_text(gui.get_node("current_move_cooldown"), "CD: ".. move.cooldown(known_move.level))
	gui.set_text(gui.get_node("current_move_description"), move.description(known_move.level))
	if known_move.level < move.max_level then
		gui.set_enabled(gui.get_node("next_move_cooldown"), true)
		gui.set_enabled(gui.get_node("next_move_description"), true)
		gui.set_enabled(gui.get_node("stone_type1"), true)
		gui.set_enabled(gui.get_node("stone_cost1"), true)
		gui.set_text(gui.get_node("next_move_cooldown"), "CD: ".. move.cooldown(known_move.level + 1))
		gui.set_text(gui.get_node("next_move_description"), move.description(known_move.level + 1))
		gui.play_flipbook(gui.get_node("stone_type1"), "type_"..types[move.type].name.."_16")
		gui.set_text(gui.get_node("stone_cost1"), game_state.stones[move.type].." / "..(known_move.level + 1))
		if game_state.stones[move.type] >= (known_move.level + 1) then
			gui.set_color(gui.get_node("stone_cost1"), vmath.vector4(0, 1, 0, 1.0))
		else
			gui.set_color(gui.get_node("stone_cost1"), vmath.vector4(1, 0, 0, 1.0))
		end
	else
		gui.set_enabled(gui.get_node("next_move_cooldown"), false)
		gui.set_text(gui.get_node("next_move_description"), "This move cannot be upgraded any further.")
		gui.set_enabled(gui.get_node("stone_type1"), false)
		gui.set_enabled(gui.get_node("stone_cost1"), false)
	end
end

function try_upgrade_move()
	local move = moves[selected_move_id]
	local known_move_id
	for i, km in ipairs(selected_mon.known_moves) do
		if km.id == selected_move_id then
			known_move_id = i
		end
	end
	local cost = selected_mon.known_moves[known_move_id].level + 1
	local cost_type = move.type
	if(game_state.stones[cost_type] >= cost and selected_mon.known_moves[known_move_id].level < move.max_level) then
		game_state.stones[cost_type] = game_state.stones[cost_type] - cost
		selected_mon.known_moves[known_move_id].level = selected_mon.known_moves[known_move_id].level + 1
		display_move_upgrade_details()
	end
end

function node_enabled(node)
	local parent = gui.get_parent(node)
	local enabled = gui.is_enabled(node)
	if parent then
		return enabled and node_enabled(parent)
	end
	return enabled
end