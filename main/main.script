local game_state = require "common/game_state"
local area_names = require "common/area_names"


local function load_screen(new_screen, old_screen)
	if old_screen ~= nil then
		msg.post("loader#"..old_screen, "unload")
	end
	msg.post("loader#"..new_screen, "load")
	msg.post("loader#"..new_screen, "enable")
end

function init(self)
	--msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	msg.post(".", "acquire_input_focus")
	game_state.calculate_pokemon_stats() --TODO: move to appropriate areas.
	--load_screen(area_names[game_state.current_area], nil)
	load_screen("add_mon", nil)
	--print(msg.url())
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		--print("Touch!")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_battle") then
		load_screen("battle", area_names[game_state.current_area])
	end
	if message_id == hash("end_battle") then
		load_screen(area_names[game_state.current_area], "battle")
	end
	if message_id == hash("load_area") then
		load_screen(area_names[game_state.current_area], area_names[message.previous_area])
	end
	if message_id == hash("load_menu") then
		load_screen("menu", area_names[game_state.current_area])
	end	
	if message_id == hash("close_menu") then
		load_screen(area_names[game_state.current_area], "menu")
	end
	if message_id == hash("close_add_mon") then
		load_screen(area_names[game_state.current_area], "add_mon")
	end
end