local game_state = require "common/game_state"
local area_names = require "common/area_names"
local encounters = require "common/encounters"

local function load_screen(new_screen, old_screen)
	if old_screen ~= nil then
		msg.post("loader#"..old_screen, "unload")
	end
	msg.post("loader#"..new_screen, "load")
	msg.post("loader#"..new_screen, "enable")
end

function init(self)
	msg.post("@render:", "use_fixed_fit_projection", { near = -1, far = 1 })
	msg.post(".", "acquire_input_focus")
	game_state.calculate_pokemon_stats() --TODO: move to appropriate areas.
	--load_screen(area_names[game_state.current_area], nil)
	for i=1,1 do
		game_state.items_found[i] = false
	end
	for i=1,1 do
		game_state.trainers_defeated[i] = false
	end
	load_screen(area_names[game_state.current_area], nil)
	math.randomseed(os.time())
	math.random(); math.random(); math.random()
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		--print("Touch!")
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("load_choose_team") then
		game_state.battle_type = message.battle_type
		game_state.battle_id = message.battle_id
		game_state.battle_level = message.level
		generate_enemy_team(message.battle_type, message.battle_id, message.level)
		if message.battle_type == 3 then
			load_screen("choose_team", "boss_select")
		else
			load_screen("choose_team", area_names[game_state.current_area])
		end
	end
	if message_id == hash("load_battle") then
		load_screen("battle", "choose_team")
	end
	if message_id == hash("end_battle") then
		if game_state.battle_type == 1 then
			game_state.dialog_is_pending = false
			if(message.victory) then
				load_screen("rewards", "battle")
			else
				load_screen(area_names[game_state.current_area], "battle")
			end
		elseif game_state.battle_type == 2 then
			game_state.dialog_is_pending = true
			if(message.victory) then
				--battle_id should be the trainer id in common/encounters.
				--this needs to be set in the trainer script
				game_state.trainers_defeated[game_state.battle_id] = true
				game_state.pending_dialog_id = game_state.victory_dialog_id
				load_screen("rewards", "battle")
			else
				game_state.pending_dialog_id = game_state.loss_dialog_id
				load_screen(area_names[game_state.current_area], "battle")
			end
		elseif game_state.battle_type == 3 then
			game_state.dialog_is_pending = true
			if(message.victory) then
				--battle_id should be the boss fight id in common/encounters.
				--this needs to be set in boss fight selection script
				local current_best = game_state.bill_bosses_defeated[game_state.battle_id]
				local this_battle = game_state.battle_level / 5
				if this_battle > current_best then
					game_state.bill_bosses_defeated[game_state.battle_id] = this_battle
				end
				
				game_state.pending_dialog_id = game_state.victory_dialog_id
				load_screen("rewards", "battle")
			else
				game_state.pending_dialog_id = game_state.loss_dialog_id
				load_screen(area_names[game_state.current_area], "battle")
			end
		end
	end
	if message_id == hash("end_rewards") then
		load_screen(area_names[game_state.current_area], "rewards")
	end
	if message_id == hash("run_away") then
		load_screen(area_names[game_state.current_area], "choose_team")
	end
	if message_id == hash("load_area") then
		load_screen(area_names[game_state.current_area], area_names[message.previous_area])
	end
	if message_id == hash("load_menu") then
		load_screen("menu", area_names[game_state.current_area])
	end	
	if message_id == hash("close_menu") then
		load_screen(area_names[game_state.current_area], "menu")
	end
	if message_id == hash("load_add_mon") then
		load_screen("add_mon", area_names[game_state.current_area])
	end
	if message_id == hash("close_add_mon") then
		load_screen(area_names[game_state.current_area], "add_mon")
	end
	if message_id == hash("close_rewards") then
		-- if the battle was against wild pokemon then allow the player to catch, otherwise return to adventure screen.
		if game_state.battle_type == 1 then
			load_screen("add_mon", "rewards")
		else
			load_screen(area_names[game_state.current_area], "rewards")
		end
	end
	if message_id == hash("load_rune_shop") then
		load_screen("rune_shop", area_names[game_state.current_area])
	end
	if message_id == hash("exit_rune_shop") then
		load_screen(area_names[game_state.current_area], "rune_shop")
	end
	if message_id == hash("load_boss_select") then
		load_screen("boss_select", area_names[game_state.current_area])
	end
	if message_id == hash("close_boss_select") then
		load_screen(area_names[game_state.current_area], "boss_select")
	end
end

function generate_enemy_team(battle_type, battle_id, level)
	game_state.enemy_mon1 = nil
	game_state.enemy_mon2 = nil
	game_state.enemy_mon3 = nil
	game_state.enemy_mon4 = nil
	game_state.enemy_boss = nil
	if battle_type == 1 then
		encounters.load_wild_encounter(game_state.current_area)
	elseif battle_type == 2 then
		encounters.load_trainer_data(battle_id)
	elseif battle_type == 3 then
		encounters.load_boss_encounter(battle_id, level)
	end
end