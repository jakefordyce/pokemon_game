local game_state = require "common/game_state"
local render_data = require "common/render"
local areas = require "common/areas"
local spawned_pokemon_icons = {}


function init(self)
	display_pokemon_grid()
	self.current_pos = go.get_position()
	self.pressed_pos = go.get_position()
	msg.post(".", "acquire_input_focus")
	for i=1,4 do
		game_state["player_mon"..i] = nil
	end
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		self.drag = true		
		self.current_pos = go.get_position()
		self.pressed_pos = vmath.vector3(self.current_pos.x, action.y, 0)
	elseif action_id == hash("touch") and action.released then
		self.drag = false
		released_pos = vmath.vector3(self.current_pos.x, action.y, 0)
		drag_distance = vmath.length(released_pos - self.pressed_pos)
		if drag_distance < 20 then
			local xpos = render_data.click_x(action.x)
			local ypos = render_data.click_y(action.y)
			p = vmath.vector3(xpos, ypos, 0)
			factory.create("#cursor_factory",p)
		end
	end

	if self.drag then
		local pos = self.current_pos - self.pressed_pos + vmath.vector3(self.current_pos.x, action.y, 0)
		go.set_position(limit(self, pos))
	end
end

function on_reload(self)
end

function display_pokemon_grid()
	local p = vmath.vector3()
	p.y = 500
	p.x = 32
	local column_count = 1
	local type_restriction = areas[game_state.player.current_area].poke_type_restriction
	
	for i, poke in ipairs(game_state.pokemon) do
		local add_mon_to_list = true
		if type_restriction ~= nil then
			add_mon_to_list = (poke.type1 == type_restriction or poke.type2 == type_restriction)
		end
		if add_mon_to_list then
			local icon = factory.create("#pokemon_icon_factory",p, nil, {mon_id = i})
			go.set_parent(icon, go.get_id("choose_team"))
			table.insert(spawned_pokemon_icons, icon)

			p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
			column_count = column_count + 1
			if column_count > 9 then
				column_count = 1
				p.y = p.y - 70
				p.x = 32
			end
		end
	end
end

function limit(self, pos)
	local top = 100 
	local bottom = 0
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function clear_gos(id_table)
	for i, v in ipairs(id_table) do
		go.delete(v)
		id_table[i] = nil
	end
end