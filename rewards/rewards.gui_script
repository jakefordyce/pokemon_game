local game_state = require "common/game_state"
local pbs = require "common/poke_base_stats"
local encounters = require "common/encounters"
local runes = require "common/runes"
local boss_stats = require "common/boss_stats"
local types = require "common/poke_types"
local exp_gained = 0

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("selected_rune_description"), false)
	calc_exp()
	check_level_ups()
	display_mons()
	display_money()
	display_runes()
	display_stones()
	display_rating()
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_rune_details") then
		gui.set_enabled(gui.get_node("selected_rune_description"), true)
		gui.set_text(gui.get_node("selected_rune_description"),runes.description(game_state.reward_runes[message.rune]))
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("done_button"),action.x,action.y) and node_enabled(gui.get_node("done_button"))) then
			msg.post("main:/loader#main", "close_rewards")
		end
	end
end

function on_reload(self)
end

function display_mons()
	for i=1,4 do
		if game_state["player_mon"..i] ~= nil then
			gui.set_enabled(gui.get_node("player_mon"..i), true)
			gui.play_flipbook(gui.get_node("player_mon"..i), pbs[game_state.pokemon[game_state["player_mon"..i]].pokedex].name.."_front_original")
			gui.set_text(gui.get_node("player_mon"..i.."_exp_text"), "+"..exp_gained.."exp")
			new_size = vmath.vector3((game_state.pokemon[game_state["player_mon"..i]].exp / pbs.exp_to_next_level(game_state.pokemon[game_state["player_mon"..i]].level) * 100), 10, 0)
			gui.set_size(gui.get_node("player_mon"..i.."_exp"), new_size)
		else
			gui.set_enabled(gui.get_node("player_mon"..i), false)
		end
	end
end

function calc_exp()
	exp_gained = 0
	if game_state.battle_type == 3 then
		exp_gained = boss_stats.exp_reward_by_level(game_state["enemy_boss"].level)
	else
		for i=1,4 do
			if game_state["enemy_mon"..i] ~= nil then
				exp_gained = exp_gained + pbs.exp_reward_by_level(game_state["enemy_mon"..i].level)
			end
		end
	end
end

function check_level_ups()
	for i=1,4 do
		if game_state["player_mon"..i] ~= nil then
			if game_state.mon_leveled(game_state["player_mon"..i], exp_gained) then
				gui.set_enabled(gui.get_node("player_mon"..i.."_level_up_text"), true)
			else
				gui.set_enabled(gui.get_node("player_mon"..i.."_level_up_text"), false)
			end
			
			if game_state.mon_learned_move(game_state["player_mon"..i]) then
				gui.set_enabled(gui.get_node("player_mon"..i.."_learned_move"), true)
			else
				gui.set_enabled(gui.get_node("player_mon"..i.."_learned_move"), false)
			end
		end
	end
end

function display_money()
	if game_state.battle_type == 2 or game_state.battle_type == 4 then
		reward_money = encounters.trainer_reward_money(game_state.battle_id)
		gui.set_text(gui.get_node("money_reward"), "Money Gained: $"..reward_money)
		game_state.player.money = game_state.player.money + reward_money
	else
		gui.set_enabled(gui.get_node("money_reward"), false)
	end
end

function display_runes()
	if game_state.battle_type == 1 or game_state.battle_type == 3 then
		game_state.generate_reward_runes()
		msg.post("rewards", "display_runes")
	else
		gui.set_enabled(gui.get_node("runes_header"), false)
	end
end

function display_stones()
	if game_state.battle_type == 3 then
		stones = game_state.generate_reward_stones()
		gui.set_text(gui.get_node("stone_reward1"), stones[1].amount)
		gui.play_flipbook(gui.get_node("stone_type1"), "type_"..types[stones[1].type].name.."_16")
		if stones[2] ~= nil then
			gui.set_text(gui.get_node("stone_reward2"), stones[2].amount)
			gui.play_flipbook(gui.get_node("stone_type2"), "type_"..types[stones[2].type].name.."_16")
		else
			gui.set_enabled(gui.get_node("stone_reward2"), false)
			gui.set_enabled(gui.get_node("stone_type2"), false)
		end
	else
		gui.set_enabled(gui.get_node("stones_panel"), false)
	end
end

function display_rating()
	if game_state.battle_type == 4 then
		gui.set_text(gui.get_node("rating_text"), "Rating Gained: "..game_state.rating_change)
	else
		gui.set_enabled(gui.get_node("rating_text"), false)
	end
end


