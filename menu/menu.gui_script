local moves = require "common/moves"
local game_state = require "common/game_state"
local pbs = require "common/poke_base_stats"
local runes = require "common/runes"
local types = require "common/poke_types"
local current_rune_slot = 1
local rune_to_enhance = {}
local selected_rune_id = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("details_panel"), false)
	gui.set_enabled(gui.get_node("current_move_panel"), false)
	gui.set_enabled(gui.get_node("enhance_rune_panel"), false)
	gui.set_enabled(gui.get_node("return_to_main_button"), false)
	gui.set_enabled(gui.get_node("runes_exit_button"), false)
	gui.set_enabled(gui.get_node("current_rune_description"), false)
	gui.set_enabled(gui.get_node("selected_rune_description"), false)
	gui.set_enabled(gui.get_node("evolve_button"), false)
	gui.set_enabled(gui.get_node("exit_evolve_button"), false)
	self.current_pokemon = nil
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex_details") then
		--message.mon will be a pokedex id
		game_state.generate_preview_mon(message.mon, 100)
		mon = game_state.preview_mon
		gui.set_text(gui.get_node("details_name"), mon.nickname)
		gui.set_text(gui.get_node("details_hp"), mon.hp)
		gui.set_text(gui.get_node("details_attack"), mon.attack)
		gui.set_text(gui.get_node("details_spattack"), mon.spattack)
		gui.set_text(gui.get_node("details_defense"), mon.defense)
		gui.set_text(gui.get_node("details_spdefense"), mon.spdefense)
		gui.set_text(gui.get_node("details_speed"), mon.speed)
		gui.set_text(gui.get_node("details_accuracy"), mon.accuracy)
		gui.set_text(gui.get_node("details_resist"), mon.resist)
		gui.set_text(gui.get_node("details_crit_chance"), (mon.crit_chance.."%"))
		gui.set_text(gui.get_node("details_crit_damage"), (mon.crit_damage.."%"))
		gui.play_flipbook(gui.get_node("details_type1"), "type_"..types[mon.type1].name.."_16")
		if mon.type2 ~= mon.type1 then
			gui.set_enabled(gui.get_node("details_type2"), true)
			gui.play_flipbook(gui.get_node("details_type2"), "type_"..types[mon.type2].name.."_16")
		else
			gui.set_enabled(gui.get_node("details_type2"), false)
		end
		gui.set_enabled(gui.get_node("details_level"), false)
		gui.set_enabled(gui.get_node("details_level_lbl"), false)
		gui.set_enabled(gui.get_node("details_exp"), false)
		gui.set_enabled(gui.get_node("details_exp_bg"), false)
		gui.set_enabled(gui.get_node("details_exp_lbl"), false)
		gui.set_enabled(gui.get_node("moves_panel"), false)
		gui.set_enabled(gui.get_node("runes_panel"), false)
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_enabled(gui.get_node("return_to_main_button"), false)
	end	
	if message_id == hash("display_pokemon_details") then
		--message.mon will be a record from common/game_state in the .pokemon table.
		self.current_pokemon = message.mon
		mon = game_state.pokemon[self.current_pokemon]
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_enabled(gui.get_node("return_to_main_button"), false)
		gui.set_enabled(gui.get_node("exit_evolve_button"), false)
		gui.set_text(gui.get_node("details_name"), mon.nickname)
		gui.set_text(gui.get_node("details_hp"), mon.hp)
		gui.set_text(gui.get_node("details_attack"), mon.attack)
		gui.set_text(gui.get_node("details_spattack"), mon.spattack)
		gui.set_text(gui.get_node("details_defense"), mon.defense)
		gui.set_text(gui.get_node("details_spdefense"), mon.spdefense)
		gui.set_text(gui.get_node("details_speed"), mon.speed)
		gui.set_text(gui.get_node("details_accuracy"), mon.accuracy)
		gui.set_text(gui.get_node("details_resist"), mon.resist)
		gui.set_text(gui.get_node("details_crit_chance"), (mon.crit_chance.."%"))
		gui.set_text(gui.get_node("details_crit_damage"), (mon.crit_damage.."%"))
		gui.play_flipbook(gui.get_node("details_type1"), "type_"..types[mon.type1].name.."_16")
		if mon.type2 ~= mon.type1 then
			gui.set_enabled(gui.get_node("details_type2"), true)
			gui.play_flipbook(gui.get_node("details_type2"), "type_"..types[mon.type2].name.."_16")
		else
			gui.set_enabled(gui.get_node("details_type2"), false)
		end
		gui.set_text(gui.get_node("details_level"), mon.level)
		new_size = vmath.vector3((mon.exp / pbs.exp_to_next_level(mon.level) * 100), 10, 0)
		gui.set_size(gui.get_node("details_exp"), new_size)

		for r = 1, 6 do
			if mon["rune"..r] ~= nil then
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_"..game_state.runes[mon["rune"..r]].rarity)
				gui.set_enabled(gui.get_node("rune"..r.."_level"), true)
				gui.set_text(gui.get_node("rune"..r.."_level"), game_state.runes[mon["rune"..r]].level)
			else
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_bg")
				gui.set_enabled(gui.get_node("rune"..r.."_level"), false)
			end
		end

		for m = 1, 4 do
			if mon["move"..m] ~= nil then
				gui.set_text(gui.get_node("move"..m.."_text"), moves[mon.known_moves[mon["move"..m]].id].name)
			else
				gui.set_text(gui.get_node("move"..m.."_text"), "")
			end
		end
		gui.set_enabled(gui.get_node("details_level"), true)
		gui.set_enabled(gui.get_node("details_level_lbl"), true)
		gui.set_enabled(gui.get_node("details_exp"), true)
		gui.set_enabled(gui.get_node("details_exp_bg"), true)
		gui.set_enabled(gui.get_node("details_exp_lbl"), true)
		gui.set_enabled(gui.get_node("moves_panel"), true)
		gui.set_enabled(gui.get_node("runes_panel"), true)
		if pbs[mon.pokedex].evolutions ~= nil then
			gui.set_enabled(gui.get_node("evolve_button"), true)
		else
			gui.set_enabled(gui.get_node("evolve_button"), false)
		end
		
	end
	if message_id == hash("update_pokemon_stats") then
		mon = game_state.pokemon[self.current_pokemon]
		gui.set_text(gui.get_node("details_hp"), mon.hp)
		gui.set_text(gui.get_node("details_attack"), mon.attack)
		gui.set_text(gui.get_node("details_spattack"), mon.spattack)
		gui.set_text(gui.get_node("details_defense"), mon.defense)
		gui.set_text(gui.get_node("details_spdefense"), mon.spdefense)
		gui.set_text(gui.get_node("details_speed"), mon.speed)
		gui.set_text(gui.get_node("details_accuracy"), mon.accuracy)
		gui.set_text(gui.get_node("details_resist"), mon.resist)
		gui.set_text(gui.get_node("details_crit_chance"), (mon.crit_chance.."%"))
		gui.set_text(gui.get_node("details_crit_damage"), (mon.crit_damage.."%"))
		for r = 1, 6 do
			if mon["rune"..r] ~= nil then
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_"..game_state.runes[mon["rune"..r]].rarity)
				gui.set_enabled(gui.get_node("rune"..r.."_level"), true)
				gui.set_text(gui.get_node("rune"..r.."_level"), game_state.runes[mon["rune"..r]].level)
			else
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_bg")
				gui.set_enabled(gui.get_node("rune"..r.."_level"), false)
			end
		end
	end
	if message_id == hash("moves_exit") then
		gui.set_enabled(gui.get_node("current_move_panel"), false)
		msg.post(".", "display_pokemon_details", {mon = self.current_pokemon})
	end
	if message_id == hash("display_rune_details") then
		selected_rune_id = message.rune
		gui.set_enabled(gui.get_node("selected_rune_description"), true)
		gui.set_text(gui.get_node("selected_rune_description"),runes.description(game_state.runes[message.rune]))
	end
	if message_id == hash("mon_rune_clicked") then
		current_rune_slot = message.rune
		mon = game_state.pokemon[self.current_pokemon]
		gui.set_enabled(gui.get_node("selected_rune_description"), false)
		gui.set_enabled(gui.get_node("runes_exit_button"), true)
		if mon["rune"..message.rune] ~= nil then
			gui.set_enabled(gui.get_node("current_rune_description"), true)
			gui.set_text(gui.get_node("current_rune_description"),runes.description(game_state.runes[mon["rune"..message.rune]]))
		else
			gui.set_enabled(gui.get_node("current_rune_description"), false)
		end
		gui.set_enabled(gui.get_node("moves_panel"), false)
		msg.post("menu", "display_runes", { rune = current_rune_slot })
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		--don't start actions if the click started on part of the GUI.
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("runes_exit_button"),action.x,action.y) and node_enabled(gui.get_node("runes_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_main_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_main_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move1_button"),action.x,action.y) and node_enabled(gui.get_node("move1_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move2_button"),action.x,action.y) and node_enabled(gui.get_node("move2_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move3_button"),action.x,action.y) and node_enabled(gui.get_node("move3_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move4_button"),action.x,action.y) and node_enabled(gui.get_node("move4_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune1"),action.x,action.y) and node_enabled(gui.get_node("rune1"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune2"),action.x,action.y) and node_enabled(gui.get_node("rune2"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune3"),action.x,action.y) and node_enabled(gui.get_node("rune3"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune4"),action.x,action.y) and node_enabled(gui.get_node("rune4"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune5"),action.x,action.y) and node_enabled(gui.get_node("rune5"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune6"),action.x,action.y) and node_enabled(gui.get_node("rune6"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("swap_rune_button"),action.x,action.y) and node_enabled(gui.get_node("swap_rune_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("remove_rune_button"),action.x,action.y) and node_enabled(gui.get_node("remove_rune_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("evolve_button"),action.x,action.y) and node_enabled(gui.get_node("evolve_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("exit_evolve_button"),action.x,action.y) and node_enabled(gui.get_node("exit_evolve_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("enhance_current_rune_button"), action.x, action.y) and node_enabled(gui.get_node("enhance_current_rune_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("enhance_selected_rune_button"), action.x, action.y) and node_enabled(gui.get_node("enhance_selected_rune_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("close_enhance_rune_panel_button"), action.x, action.y) and node_enabled(gui.get_node("close_enhance_rune_panel_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pay_button"),action.x,action.y) and node_enabled(gui.get_node("pay_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_increase"),action.x,action.y) and node_enabled(gui.get_node("substat1_increase"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat1_decrease"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat1_reforge"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_increase"),action.x,action.y) and node_enabled(gui.get_node("substat2_increase"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat2_decrease"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat2_reforge"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_increase"),action.x,action.y) and node_enabled(gui.get_node("substat3_increase"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat3_decrease"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat3_reforge"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_increase"),action.x,action.y) and node_enabled(gui.get_node("substat4_increase"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat4_decrease"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat4_reforge"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_increase"),action.x,action.y) and node_enabled(gui.get_node("substat5_increase"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat5_decrease"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat5_reforge"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pay_button"),action.x,action.y) and node_enabled(gui.get_node("pay_button"))) then
			return true
		end
	end
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			msg.post("main:/loader#main", "close_menu")
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			msg.post("menu", "display_pokedex")
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			msg.post("menu", "display_pokemon")
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			gui.set_enabled(gui.get_node("details_panel"), false)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			gui.set_enabled(gui.get_node("evolve_button"), false)
			gui.set_enabled(gui.get_node("exit_evolve_button"), false)
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			msg.post("menu", "hide_runes")
			msg.post("menu", "redisplay_grid")
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			msg.post(".", "moves_exit")
			msg.post("menu", "hide_pokemon_moves")
			return true
		end
		if(gui.pick_node(gui.get_node("runes_exit_button"),action.x,action.y) and node_enabled(gui.get_node("runes_exit_button"))) then
			msg.post("menu", "hide_runes")
			gui.set_enabled(gui.get_node("moves_panel"), true)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			current_rune_slot = nil
			selected_rune_id = nil
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_main_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_main_button"))) then
			gui.set_enabled(gui.get_node("main"), true)
			gui.set_enabled(gui.get_node("return_to_main_button"), false)
			msg.post("menu", "return_to_main")
			return true
		end
		if(gui.pick_node(gui.get_node("move1_button"),action.x,action.y) and node_enabled(gui.get_node("move1_button"))) then
			move_button_clicked(self,1)
			return true
		end
		if(gui.pick_node(gui.get_node("move2_button"),action.x,action.y) and node_enabled(gui.get_node("move2_button"))) then
			move_button_clicked(self,2)
			return true
		end
		if(gui.pick_node(gui.get_node("move3_button"),action.x,action.y) and node_enabled(gui.get_node("move3_button"))) then
			move_button_clicked(self,3)
			return true
		end
		if(gui.pick_node(gui.get_node("move4_button"),action.x,action.y) and node_enabled(gui.get_node("move4_button"))) then
			move_button_clicked(self,4)
			return true
		end
		if(gui.pick_node(gui.get_node("rune1"),action.x,action.y) and node_enabled(gui.get_node("rune1"))) then
			msg.post(".", "mon_rune_clicked", {rune = 1})
			return true
		end
		if(gui.pick_node(gui.get_node("rune2"),action.x,action.y) and node_enabled(gui.get_node("rune2"))) then
			msg.post(".", "mon_rune_clicked", {rune = 2})
			return true
		end
		if(gui.pick_node(gui.get_node("rune3"),action.x,action.y) and node_enabled(gui.get_node("rune3"))) then
			msg.post(".", "mon_rune_clicked", {rune = 3})
			return true
		end
		if(gui.pick_node(gui.get_node("rune4"),action.x,action.y) and node_enabled(gui.get_node("rune4"))) then
			msg.post(".", "mon_rune_clicked", {rune = 4})
			return true
		end
		if(gui.pick_node(gui.get_node("rune5"),action.x,action.y) and node_enabled(gui.get_node("rune5"))) then
			msg.post(".", "mon_rune_clicked", {rune = 5})
			return true
		end
		if(gui.pick_node(gui.get_node("rune6"),action.x,action.y) and node_enabled(gui.get_node("rune6"))) then
			msg.post(".", "mon_rune_clicked", {rune = 6})
			return true
		end
		if(gui.pick_node(gui.get_node("swap_rune_button"),action.x,action.y) and node_enabled(gui.get_node("swap_rune_button"))) then
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			selected_rune_id = nil
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			msg.post("menu", "swap_rune")
			return true
		end
		if(gui.pick_node(gui.get_node("remove_rune_button"),action.x,action.y) and node_enabled(gui.get_node("remove_rune_button"))) then
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			selected_rune_id = nil
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			msg.post("menu", "remove_rune")
			return true
		end
		if(gui.pick_node(gui.get_node("evolve_button"),action.x,action.y) and node_enabled(gui.get_node("evolve_button"))) then
			gui.set_enabled(gui.get_node("details_panel"), false)
			gui.set_enabled(gui.get_node("exit_evolve_button"), true)
			msg.post("menu", "display_evolutions", {pokedex = game_state.pokemon[self.current_pokemon].pokedex})
			return true
		end
		if(gui.pick_node(gui.get_node("exit_evolve_button"),action.x,action.y) and node_enabled(gui.get_node("exit_evolve_button"))) then
			gui.set_enabled(gui.get_node("details_panel"), true)
			gui.set_enabled(gui.get_node("exit_evolve_button"), false)
			msg.post("menu", "hide_evolutions")
			return true
		end
		if(gui.pick_node(gui.get_node("enhance_current_rune_button"), action.x, action.y) and node_enabled(gui.get_node("enhance_current_rune_button"))) then
			gui.set_enabled(gui.get_node("enhance_rune_panel"), true)
			gui.set_enabled(gui.get_node("details_panel"), false)
			msg.post("menu", "hide_runes")
			local mon = game_state.pokemon[self.current_pokemon]
			rune_to_enhance = game_state.runes[mon["rune"..current_rune_slot]]
			display_rune_details()
			return true
		end
		if(gui.pick_node(gui.get_node("enhance_selected_rune_button"), action.x, action.y) and node_enabled(gui.get_node("enhance_selected_rune_button"))) then
			gui.set_enabled(gui.get_node("enhance_rune_panel"), true)
			gui.set_enabled(gui.get_node("details_panel"), false)
			msg.post("menu", "hide_runes")
			rune_to_enhance = game_state.runes[selected_rune_id]
			display_rune_details()
			return true
		end
		if(gui.pick_node(gui.get_node("close_enhance_rune_panel_button"), action.x, action.y) and node_enabled(gui.get_node("close_enhance_rune_panel_button"))) then
			gui.set_enabled(gui.get_node("enhance_rune_panel"), false)
			gui.set_enabled(gui.get_node("details_panel"), true)
			msg.post("menu", "display_runes", { rune = current_rune_slot })
			msg.post(".", "mon_rune_clicked", { rune = current_rune_slot })
			if selected_rune_id ~= nil then
				msg.post(".", "display_rune_details", { rune = selected_rune_id })
			end
			msg.post(".", "update_pokemon_stats", { mon = self.current_pokemon } )
			return true
		end
		if(gui.pick_node(gui.get_node("pay_button"),action.x,action.y) and node_enabled(gui.get_node("pay_button"))) then
			upgrade_rune()
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_increase"),action.x,action.y) and node_enabled(gui.get_node("substat1_increase"))) then
			increase_substat(1)
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat1_decrease"))) then
			decrease_substat(1)
			return true
		end
		if(gui.pick_node(gui.get_node("substat1_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat1_reforge"))) then
			reforge_substat(1)
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_increase"),action.x,action.y) and node_enabled(gui.get_node("substat2_increase"))) then
			increase_substat(2)
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat2_decrease"))) then
			decrease_substat(2)
			return true
		end
		if(gui.pick_node(gui.get_node("substat2_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat2_reforge"))) then
			reforge_substat(2)
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_increase"),action.x,action.y) and node_enabled(gui.get_node("substat3_increase"))) then
			increase_substat(3)
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat3_decrease"))) then
			decrease_substat(3)
			return true
		end
		if(gui.pick_node(gui.get_node("substat3_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat3_reforge"))) then
			reforge_substat(3)
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_increase"),action.x,action.y) and node_enabled(gui.get_node("substat4_increase"))) then
			increase_substat(4)
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat4_decrease"))) then
			decrease_substat(4)
			return true
		end
		if(gui.pick_node(gui.get_node("substat4_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat4_reforge"))) then
			reforge_substat(4)
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_increase"),action.x,action.y) and node_enabled(gui.get_node("substat5_increase"))) then
			increase_substat(5)
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_decrease"),action.x,action.y) and node_enabled(gui.get_node("substat5_decrease"))) then
			decrease_substat(5)
			return true
		end
		if(gui.pick_node(gui.get_node("substat5_reforge"),action.x,action.y) and node_enabled(gui.get_node("substat5_reforge"))) then
			reforge_substat(5)
			return true
		end
	end
end

function on_reload(self)
end

function display_rune_details()
	gui.play_flipbook(gui.get_node("rune_sprite"), "rune_"..rune_to_enhance.slot.."_"..rune_to_enhance.rarity)
	gui.set_text(gui.get_node("rune_level"), rune_to_enhance.level)
	gui.set_text(gui.get_node("current_money_text"), "Money: $"..game_state.money)

	gui.set_enabled(gui.get_node("substats_remaining"), true)
	gui.set_text(gui.get_node("substats_remaining"), "Substats: "..rune_to_enhance.substat_points)
	gui.set_text(gui.get_node("cost_text"), "Cost: $"..runes.upgrade_cost(rune_to_enhance.level))
	for i=1,5 do
		gui.set_enabled(gui.get_node("substat"..i.."_increase"), true)
		gui.set_enabled(gui.get_node("substat"..i.."_decrease"), true)
	end

	value_text = "+ " .. runes.mainstat_value(rune_to_enhance.main_stat, rune_to_enhance.level)
	if rune_to_enhance.main_stat > 6 then
		value_text = value_text .. "%"
	end

	gui.set_text(gui.get_node("mainstat_lbl"), runes.stat_names[rune_to_enhance.main_stat])
	gui.set_text(gui.get_node("mainstat"), value_text)

	for i=1,5 do
		gui.set_enabled(gui.get_node("substat"..i), false)
	end
	for i,ss in ipairs(rune_to_enhance.substats) do
		value_text = "+ " .. runes.substat_value(ss.stat, ss.rank)
		if ss.stat > 6 then
			value_text = value_text .. "%"
		end
		gui.set_enabled(gui.get_node("substat"..i), true)
		gui.set_text(gui.get_node("substat"..i.."_lbl"), runes.stat_names[ss.stat])
		gui.set_text(gui.get_node("substat"..i), value_text)
	end

end

function increase_substat(substat_num)
	if(rune_to_enhance.substat_points > 0 and #rune_to_enhance.substats > 3) then
		rune_to_enhance.substat_points = rune_to_enhance.substat_points - 1
		rune_to_enhance.substats[substat_num].rank = rune_to_enhance.substats[substat_num].rank +1
		display_rune_details()
		game_state.calculate_pokemon_stats()
	end
end

function decrease_substat(substat_num)
	if(rune_to_enhance.substats[substat_num].rank > 1 and #rune_to_enhance.substats > 3) then
		rune_to_enhance.substats[substat_num].rank = rune_to_enhance.substats[substat_num].rank - 1
		rune_to_enhance.substat_points = rune_to_enhance.substat_points + 1
		display_rune_details()
		game_state.calculate_pokemon_stats()
	end
end

function reforge_substat(substat_num)
	runes.reforge_rune(rune_to_enhance, substat_num)
	display_rune_details()
	game_state.calculate_pokemon_stats()
end

function upgrade_rune()
	cost = runes.upgrade_cost(rune_to_enhance.level)
	if game_state.money >= cost then
		runes.levelup_rune(rune_to_enhance)
		game_state.calculate_pokemon_stats()
		game_state.money = game_state.money - cost
		display_rune_details()
	end
end

function move_button_clicked(self, move_num)
	gui.set_enabled(gui.get_node("details_panel"), false)
	gui.set_enabled(gui.get_node("current_move_panel"), true)
	pmon = game_state.pokemon[self.current_pokemon]
	if(pmon["move"..move_num] ~= nil) then
		move_level = pmon.known_moves[pmon["move"..move_num]].level
		gui.set_text(gui.get_node("current_move_description"), moves[pmon.known_moves[pmon["move"..move_num]].id].description(move_level))
		gui.set_text(gui.get_node("current_move_name"), moves[pmon.known_moves[pmon["move"..move_num]].id].name)
		gui.set_text(gui.get_node("current_move_cooldown"), "CD: "..moves[pmon.known_moves[pmon["move"..move_num]].id].cooldown(move_level))
		gui.set_enabled(gui.get_node("current_move_type"), true)
		gui.play_flipbook(gui.get_node("current_move_type"), "type_"..types[moves[pmon.known_moves[pmon["move"..move_num]].id].type].name.."_16")
	else
		gui.set_text(gui.get_node("current_move_description"), "select a move...")
		gui.set_text(gui.get_node("current_move_name"), "")
		gui.set_text(gui.get_node("current_move_cooldown"), "")
		gui.set_enabled(gui.get_node("current_move_type"), false)
	end
	
	msg.post("menu", "display_pokemon_moves", {mon = pmon, selected_move="move"..move_num})
end


function node_enabled(node)
	local parent = gui.get_parent(node)
	local enabled = gui.is_enabled(node)
	if parent then
		return enabled and node_enabled(parent)
	end
	return enabled
end