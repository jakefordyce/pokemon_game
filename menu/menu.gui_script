local moves = require "common/moves"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("details_panel"), false)
	gui.set_enabled(gui.get_node("current_move_panel"), false)
	gui.set_enabled(gui.get_node("move1"), false)
	gui.set_enabled(gui.get_node("move2"), false)
	gui.set_enabled(gui.get_node("move3"), false)
	gui.set_enabled(gui.get_node("move4"), false)
	self.current_pokemon = nil
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex_details") then
		--message.mon will be a record from common/poke_base_stats
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_text(gui.get_node("details_name"), message.mon.name)
	end	
	if message_id == hash("display_pokemon_details") then
		--message.mon will be a record from common/game_state in the .pokemon table.
		self.current_pokemon = message.mon
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_text(gui.get_node("details_name"), message.mon.name)
		gui.set_enabled(gui.get_node("move1"), true)
		gui.set_enabled(gui.get_node("move2"), true)
		gui.set_enabled(gui.get_node("move3"), true)
		gui.set_enabled(gui.get_node("move4"), true)
		gui.set_text(gui.get_node("move1"), moves[message.mon.known_moves[message.mon.move1].id].name)
		gui.set_text(gui.get_node("move2"), moves[message.mon.known_moves[message.mon.move2].id].name)
		gui.set_text(gui.get_node("move3"), moves[message.mon.known_moves[message.mon.move3].id].name)
		gui.set_text(gui.get_node("move4"), moves[message.mon.known_moves[message.mon.move4].id].name)
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		--don't start actions if the click started on part of the GUI.
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move1"),action.x,action.y) and node_enabled(gui.get_node("move1"))) then
			return true
		end
	end
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			print("exit_button")
			msg.post("main:/loader#main", "close_menu")
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			msg.post("menu", "display_pokedex")
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			msg.post("menu", "display_pokemon")
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			gui.set_enabled(gui.get_node("details_panel"), false)
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			gui.set_enabled(gui.get_node("current_move_panel"), false)
			gui.set_enabled(gui.get_node("details_panel"), true)
			return true
		end
		if(gui.pick_node(gui.get_node("move1"),action.x,action.y) and node_enabled(gui.get_node("move1"))) then
			gui.set_enabled(gui.get_node("details_panel"), false)
			gui.set_enabled(gui.get_node("current_move_panel"), true)
			--TODO: use real level instead of 0.
			gui.set_text(gui.get_node("current_move_description"), moves[self.current_pokemon.known_moves[self.current_pokemon.move1].id].description(0))
			msg.post("menu", "display_pokemon_moves", {mon = self.current_pokemon})
			return true
		end
	end
end

function on_reload(self)
end

function node_enabled(node)
	local parent = gui.get_parent(node)
	local enabled = gui.is_enabled(node)
	if parent then
		return enabled and gui.is_enabled(parent)
	end
	return enabled
end