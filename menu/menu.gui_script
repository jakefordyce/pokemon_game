local moves = require "common/moves"
local game_state = require "common/game_state"
local pbs = require "common/poke_base_stats"
local runes = require "common/runes"

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("details_panel"), false)
	gui.set_enabled(gui.get_node("current_move_panel"), false)
	gui.set_enabled(gui.get_node("return_to_main_button"), false)
	gui.set_enabled(gui.get_node("runes_exit_button"), false)
	gui.set_enabled(gui.get_node("selected_rune_description"), false)
	self.current_pokemon = nil
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex_details") then
		--message.mon will be a record from common/poke_base_stats
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_enabled(gui.get_node("return_to_main_button"), false)
		gui.set_text(gui.get_node("details_name"), message.mon.name)
	end	
	if message_id == hash("display_pokemon_details") then
		--message.mon will be a record from common/game_state in the .pokemon table.
		self.current_pokemon = message.mon
		mon = game_state.pokemon[self.current_pokemon]
		gui.set_enabled(gui.get_node("details_panel"), true)
		gui.set_enabled(gui.get_node("return_to_main_button"), false)
		gui.set_text(gui.get_node("details_name"), mon.name)
		gui.set_text(gui.get_node("details_hp"), mon.hp)
		gui.set_text(gui.get_node("details_attack"), mon.attack)
		gui.set_text(gui.get_node("details_spattack"), mon.spattack)
		gui.set_text(gui.get_node("details_defense"), mon.defense)
		gui.set_text(gui.get_node("details_spdefense"), mon.spdefense)
		gui.set_text(gui.get_node("details_speed"), mon.speed)
		gui.set_text(gui.get_node("details_accuracy"), mon.accuracy)
		gui.set_text(gui.get_node("details_resist"), mon.resist)
		gui.set_text(gui.get_node("details_crit_chance"), (mon.crit_chance.."%"))
		gui.set_text(gui.get_node("details_crit_damage"), (mon.crit_damage.."%"))
		gui.set_text(gui.get_node("details_level"), mon.level)
		new_size = vmath.vector3((mon.exp / pbs.exp_to_next_level(mon.level) * 100), 10, 0)
		gui.set_size(gui.get_node("details_exp"), new_size)

		for r = 1, 6 do
			if mon["rune"..r] ~= nil then
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_"..game_state.runes[mon["rune"..r]].rarity)
			else
				gui.play_flipbook(gui.get_node("rune"..r), "rune_"..r.."_bg")
			end
		end

		for m = 1, 4 do
			if mon["move"..m] ~= nil then
				gui.set_text(gui.get_node("move"..m.."_text"), moves[mon.known_moves[mon["move"..m]].id].name)
			else
				gui.set_text(gui.get_node("move"..m.."_text"), "")
			end
		end
		
	end
	if message_id == hash("moves_exit") then
		gui.set_enabled(gui.get_node("current_move_panel"), false)
		msg.post(".", "display_pokemon_details", {mon = self.current_pokemon})
	end
	if message_id == hash("display_rune_details") then
		gui.set_enabled(gui.get_node("selected_rune_description"), true)
		gui.set_text(gui.get_node("selected_rune_description"),runes.description(game_state.runes[message.rune]))
	end
	if message_id == hash("rune_clicked") then
		mon = game_state.pokemon[self.current_pokemon]
		gui.set_enabled(gui.get_node("selected_rune_description"), false)
		gui.set_enabled(gui.get_node("runes_exit_button"), true)
		if mon["rune"..message.rune] ~= nil then
			gui.set_enabled(gui.get_node("current_rune_description"), true)
			gui.set_text(gui.get_node("current_rune_description"),runes.description(game_state.runes[mon["rune"..message.rune]]))
		else
			gui.set_enabled(gui.get_node("current_rune_description"), false)
		end
		gui.set_enabled(gui.get_node("moves_panel"), false)
		msg.post("menu", "display_runes", { rune = message.rune })
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		--don't start actions if the click started on part of the GUI.
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("runes_exit_button"),action.x,action.y) and node_enabled(gui.get_node("runes_exit_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_main_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_main_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move1_button"),action.x,action.y) and node_enabled(gui.get_node("move1_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move2_button"),action.x,action.y) and node_enabled(gui.get_node("move2_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move3_button"),action.x,action.y) and node_enabled(gui.get_node("move3_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("move4_button"),action.x,action.y) and node_enabled(gui.get_node("move4_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune1"),action.x,action.y) and node_enabled(gui.get_node("rune1"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune2"),action.x,action.y) and node_enabled(gui.get_node("rune2"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune3"),action.x,action.y) and node_enabled(gui.get_node("rune3"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune4"),action.x,action.y) and node_enabled(gui.get_node("rune4"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune5"),action.x,action.y) and node_enabled(gui.get_node("rune5"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("rune6"),action.x,action.y) and node_enabled(gui.get_node("rune6"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("swap_rune_button"),action.x,action.y) and node_enabled(gui.get_node("swap_rune_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("remove_rune_button"),action.x,action.y) and node_enabled(gui.get_node("remove_rune_button"))) then
			return true
		end
	end
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("exit_button"),action.x,action.y) and node_enabled(gui.get_node("exit_button"))) then
			msg.post("main:/loader#main", "close_menu")
		end
		if(gui.pick_node(gui.get_node("pokedex_button"),action.x,action.y) and node_enabled(gui.get_node("pokedex_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			msg.post("menu", "display_pokedex")
			return true
		end
		if(gui.pick_node(gui.get_node("pokemon_button"),action.x,action.y) and node_enabled(gui.get_node("pokemon_button"))) then
			gui.set_enabled(gui.get_node("main"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			msg.post("menu", "display_pokemon")
			return true
		end
		if(gui.pick_node(gui.get_node("details_exit_button"),action.x,action.y) and node_enabled(gui.get_node("details_exit_button"))) then
			gui.set_enabled(gui.get_node("details_panel"), false)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("return_to_main_button"), true)
			msg.post("menu", "hide_runes")
			return true
		end
		if(gui.pick_node(gui.get_node("moves_exit_button"),action.x,action.y) and node_enabled(gui.get_node("moves_exit_button"))) then
			msg.post(".", "moves_exit")
			msg.post("menu", "hide_pokemon_moves")
			return true
		end
		if(gui.pick_node(gui.get_node("runes_exit_button"),action.x,action.y) and node_enabled(gui.get_node("runes_exit_button"))) then
			msg.post("menu", "hide_runes")
			gui.set_enabled(gui.get_node("moves_panel"), true)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_main_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_main_button"))) then
			gui.set_enabled(gui.get_node("main"), true)
			gui.set_enabled(gui.get_node("return_to_main_button"), false)
			msg.post("menu", "return_to_main")
			return true
		end
		if(gui.pick_node(gui.get_node("move1_button"),action.x,action.y) and node_enabled(gui.get_node("move1_button"))) then
			move_button_clicked(self,1)
			return true
		end
		if(gui.pick_node(gui.get_node("move2_button"),action.x,action.y) and node_enabled(gui.get_node("move2_button"))) then
			move_button_clicked(self,2)
			return true
		end
		if(gui.pick_node(gui.get_node("move3_button"),action.x,action.y) and node_enabled(gui.get_node("move3_button"))) then
			move_button_clicked(self,3)
			return true
		end
		if(gui.pick_node(gui.get_node("move4_button"),action.x,action.y) and node_enabled(gui.get_node("move4_button"))) then
			move_button_clicked(self,4)
			return true
		end
		if(gui.pick_node(gui.get_node("rune1"),action.x,action.y) and node_enabled(gui.get_node("rune1"))) then
			msg.post(".", "rune_clicked", {rune = 1})
			return true
		end
		if(gui.pick_node(gui.get_node("rune2"),action.x,action.y) and node_enabled(gui.get_node("rune2"))) then
			msg.post(".", "rune_clicked", {rune = 2})
			return true
		end
		if(gui.pick_node(gui.get_node("rune3"),action.x,action.y) and node_enabled(gui.get_node("rune3"))) then
			msg.post(".", "rune_clicked", {rune = 3})
			return true
		end
		if(gui.pick_node(gui.get_node("rune4"),action.x,action.y) and node_enabled(gui.get_node("rune4"))) then
			msg.post(".", "rune_clicked", {rune = 4})
			return true
		end
		if(gui.pick_node(gui.get_node("rune5"),action.x,action.y) and node_enabled(gui.get_node("rune5"))) then
			msg.post(".", "rune_clicked", {rune = 5})
			return true
		end
		if(gui.pick_node(gui.get_node("rune6"),action.x,action.y) and node_enabled(gui.get_node("rune6"))) then
			msg.post(".", "rune_clicked", {rune = 6})
			return true
		end
		if(gui.pick_node(gui.get_node("swap_rune_button"),action.x,action.y) and node_enabled(gui.get_node("swap_rune_button"))) then
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			msg.post("menu", "swap_rune")
			return true
		end
		if(gui.pick_node(gui.get_node("remove_rune_button"),action.x,action.y) and node_enabled(gui.get_node("remove_rune_button"))) then
			gui.set_enabled(gui.get_node("runes_exit_button"), false)
			gui.set_enabled(gui.get_node("selected_rune_description"), false)
			gui.set_enabled(gui.get_node("current_rune_description"), false)
			msg.post("menu", "remove_rune")
			return true
		end
	end
end

function on_reload(self)
end

function move_button_clicked(self, move_num)
	gui.set_enabled(gui.get_node("details_panel"), false)
	gui.set_enabled(gui.get_node("current_move_panel"), true)
	--TODO: use real level instead of 0.
	pmon = game_state.pokemon[self.current_pokemon]
	if(pmon["move"..move_num] ~= nil) then
		gui.set_text(gui.get_node("current_move_description"), moves[pmon.known_moves[pmon["move"..move_num]].id].description(0))
	else
		gui.set_text(gui.get_node("current_move_description"), "select a move...")
	end
	
	msg.post("menu", "display_pokemon_moves", {mon = pmon, selected_move="move"..move_num})
end


function node_enabled(node)
	local parent = gui.get_parent(node)
	local enabled = gui.is_enabled(node)
	if parent then
		return enabled and gui.is_enabled(parent)
	end
	return enabled
end