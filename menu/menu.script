local spawned_pokedex_icons = {}
local pbs = require "common/poke_base_stats"

function init(self)
	msg.post(".", "acquire_input_focus")
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex") then
		display_pokedex_grid()
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		self.drag = true
		self.current_pos = go.get_position()
		self.pressed_pos = vmath.vector3(self.current_pos.x, action.y, 0)
		--self.pressed_time = socket.gettime()
	elseif action.released then
		self.drag = false
	end

	if self.drag then
		local pos = self.current_pos - self.pressed_pos + vmath.vector3(self.current_pos.x, action.y, 0)
		go.set_position(limit(self, pos))
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function display_pokedex_grid()
	local p = vmath.vector3()
	p.y = 1000
	p.x = 32

	for i, poke in ipairs(pbs) do
		local icon = factory.create("#pokedex_icon_factory",p, nil, {pokedex = i})
		go.set_parent(icon, go.get_id("menu"))
		table.insert(spawned_pokedex_icons, icon)

		p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
	end
	
end

function limit(self, pos)
	local top = 0 
	local bottom = -100
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function clear_gos(id_table)
	for i, v in ipairs(id_table) do
		go.delete(v)
		id_table[i] = nil
	end
	for i, v in ipairs(id_table) do
		print(v)
	end
end