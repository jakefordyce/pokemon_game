local pbs = require "common/poke_base_stats"
local game_state = require "common/game_state"
local moves = require "common/moves"
local render_data = require "common/render"
local spawned_pokedex_icons = {}
local spawned_pokemon_icons = {}
local spawned_moves = {}
local spawned_rune_icons = {}
local spawned_evolutions = {}
local current_mon = nil
local current_move = "move1"
local current_rune = 1
local selected_rune = nil
local current_menu = 1 --pokedex

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_pos = go.get_position()
	self.pressed_pos = go.get_position()
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex") then
		current_menu = 1
		display_pokedex_grid()
	end
	if message_id == hash("display_pokemon") then
		current_menu = 2
		display_pokemon_grid()
	end
	if message_id == hash("select_pokemon") then
		current_mon = message.mon
	end
	--this is sent from the GUI when a user selects one of their pokemon's moves.
	if message_id == hash("display_pokemon_moves") then
		clear_gos(spawned_pokemon_icons)
		current_move = message.selected_move
		display_move_list(message.mon)
	end
	if message_id == hash("display_runes") then
		clear_gos(spawned_rune_icons)
		current_rune = message.rune
		display_runes_grid()
	end
	if message_id == hash("hide_runes") then
		clear_gos(spawned_rune_icons)
		if current_menu == 1 then
			display_pokedex_grid()
		elseif current_menu == 2 then
			display_pokemon_grid()
		end
	end
	if message_id == hash("select_rune") then
		selected_rune = message.rune
	end
	if message_id == hash("hide_pokemon_moves") then
		clear_gos(spawned_moves)
		display_pokemon_grid()
	end
	if message_id == hash("swap_move") then
		msg.post(".", "hide_pokemon_moves")
		swap_move(message.move_id)
		msg.post("gui", "moves_exit", {mon = current_mon})
	end
	if message_id == hash("swap_rune") then
		msg.post(".", "hide_runes")
		swap_rune()
		msg.post("gui", "display_pokemon_details", {mon = current_mon})
	end
	if message_id == hash("remove_rune") then
		msg.post(".", "hide_runes")
		remove_rune()
		msg.post("gui", "display_pokemon_details", {mon = current_mon})
	end
	if message_id == hash("return_to_main") then
		clear_gos(spawned_pokedex_icons)
		clear_gos(spawned_pokemon_icons)
	end
	if message_id == hash("display_evolutions") then
		clear_gos(spawned_pokemon_icons)
		display_evolutions(message.pokedex)
	end
	if message_id == hash("hide_evolutions") then
		clear_gos(spawned_evolutions)
		display_pokemon_grid()
	end
	if message_id == hash("evolve_pokemon") then
		try_evolve_pokemon(message.pokedex, message.evolve_id)
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		self.drag = true		
		self.current_pos = go.get_position()
		self.pressed_pos = vmath.vector3(self.current_pos.x, action.y, 0)
	elseif action.released then
		self.drag = false
		released_pos = vmath.vector3(self.current_pos.x, action.y, 0)
		drag_distance = vmath.length(released_pos - self.pressed_pos)
		if drag_distance < 20 then
			local xpos = render_data.click_x(action.x)
			local ypos = render_data.click_y(action.y)
			p = vmath.vector3(xpos, ypos, 0)
			factory.create("#cursor_factory",p)
		end
	end

	if self.drag then
		local pos = self.current_pos - self.pressed_pos + vmath.vector3(self.current_pos.x, action.y, 0)
		go.set_position(limit(self, pos))
	end
end

function on_reload(self)
end

function try_evolve_pokemon(pokedex, evolve_id)
	evolution = pbs[pokedex].evolutions[evolve_id]
	if game_state.stones[evolution.stone_type1] >= evolution.stone_cost1 
	and (evolution.stone_type2 == nil or game_state.stones[evolution.stone_type2] >= evolution.stone_cost2)
	then
		game_state.stones[evolution.stone_type1] = game_state.stones[evolution.stone_type1] - evolution.stone_cost1
		if evolution.stone_type2 ~= nil then
			game_state.stones[evolution.stone_type2] = game_state.stones[evolution.stone_type2] - evolution.stone_cost2
		end
		game_state.evolve_pokemon(current_mon, evolution.target)
		clear_gos(spawned_evolutions)
		msg.post("gui", "display_pokemon_details", {mon = current_mon})
	end
end

function swap_move(move_id)
	selected_move = 1
	mon = game_state.pokemon[current_mon]
	--we have to find which of the pokemon's known moves matches the move_id.
	for i, m in ipairs(mon.known_moves) do
		if m.id == move_id then
			selected_move = i
		end
	end
	--current_move should contain move1, move2, move3, or move4
	mon[current_move] = selected_move
end

function swap_rune()
	mon = game_state.pokemon[current_mon]
	if mon["rune"..current_rune] ~= nil then
		game_state.runes[mon["rune"..current_rune]].equipped_id = nil
	end
	mon["rune"..current_rune] = selected_rune
	game_state.runes[selected_rune].equipped_id = current_mon
	game_state.calculate_pokemon_stats()
end

function remove_rune()
	game_state.runes[mon["rune"..current_rune]].equipped_id = nil
	mon["rune"..current_rune] = nil
	game_state.calculate_pokemon_stats()
end

function display_pokedex_grid()
	clear_gos(spawned_pokedex_icons)
	clear_gos(spawned_pokemon_icons)
	local p = vmath.vector3()
	p.y = 1000
	p.x = 32
	local column_count = 1

	for i, poke in ipairs(pbs) do
		if (poke.name ~= nil) then
			local icon = factory.create("#pokedex_icon_factory",p, nil, {pokedex = i})
			go.set_parent(icon, go.get_id("menu"))
			table.insert(spawned_pokedex_icons, icon)

			p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
			column_count = column_count + 1
			if column_count > 9 then
				column_count = 1
				p.y = p.y - 70
				p.x = 32
			end
		end
	end
end

function display_pokemon_grid()
	clear_gos(spawned_pokedex_icons)
	clear_gos(spawned_pokemon_icons)
	local p = vmath.vector3()
	p.y = 1000
	p.x = 32
	local column_count = 1

	for i, poke in ipairs(game_state.pokemon) do
		local icon = factory.create("#pokemon_icon_factory",p, nil, {mon_id = i})
		go.set_parent(icon, go.get_id("menu"))
		table.insert(spawned_pokemon_icons, icon)

		p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
		column_count = column_count + 1
		if column_count > 9 then
			column_count = 1
			p.y = p.y - 70
			p.x = 32
		end
	end
end

function display_evolutions(pokedex)
	local p = vmath.vector3()
	p.y = 1000
	p.x = 320

	evolutions = pbs[pokedex].evolutions
	for i, e in ipairs(evolutions) do
		local evolution = factory.create("#evolution_factory",p, nil, {pokedex = pokedex, evolve_id = i})
		go.set_parent(evolution, go.get_id("menu"))
		table.insert(spawned_evolutions, evolution)

		p.y = p.y - 100 --each object is roughly 100px tall
	end	
end

function display_move_list(mon)
	local p = vmath.vector3()
	p.y = 900
	p.x = 320

	for i, m in ipairs(mon.known_moves) do
		move_equipped = false
		for e=1,4 do
			if mon["move"..e] ~= nil and mon.known_moves[mon["move"..e]].id == m.id then
				move_equipped = true
			end
		end

		--move1 has to be a "default" move. Also, "default" moves cannot go in other slots.
		move_can_equip_in_slot = false
		if(current_move == "move1") then
			if(moves[m.id].default) then
				move_can_equip_in_slot = true
			end
		else
			if(moves[m.id].default == false) then
				move_can_equip_in_slot = true
			end
		end
		
		if (move_equipped == false) and move_can_equip_in_slot then
			local move = factory.create("#move_factory",p, nil, {move_index = m.id})
			go.set_parent(move, go.get_id("menu"))
			table.insert(spawned_moves, move)

			p.y = p.y - 100 --each image is 100px tall
		end
	end	
end

function display_runes_grid()
	local p = vmath.vector3()
	p.y = 450
	p.x = 32
	mon = game_state.pokemon[current_mon]

	for i, rune in ipairs(game_state.runes) do
		if rune.equipped_id == nil and rune.slot == current_rune then
			local icon = factory.create("#rune_icon_factory",p, nil, {rune_id = i})
			go.set_parent(icon, go.get_id("menu"))
			table.insert(spawned_rune_icons, icon)

			p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
		end
	end
end

function limit(self, pos)
	local top = 100 
	local bottom = 0
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function clear_gos(id_table)
	for i, v in ipairs(id_table) do
		go.delete(v)
		id_table[i] = nil
	end
end