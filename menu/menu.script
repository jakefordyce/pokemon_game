local spawned_pokedex_icons = {}
local spawned_pokemon_icons = {}
local spawned_moves = {}
local pbs = require "common/poke_base_stats"
local game_state = require "common/game_state"
local current_mon = nil
local current_move = "move1"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.current_pos = go.get_position()
	self.pressed_pos = go.get_position()
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_pokedex") then
		display_pokedex_grid()
	end
	if message_id == hash("display_pokemon") then
		display_pokemon_grid()
	end
	if message_id == hash("select_pokemon") then
		current_mon = game_state.pokemon[message.mon]
	end
	--this is sent from the GUI when a user selects one of their pokemon's moves.
	if message_id == hash("display_pokemon_moves") then
		clear_gos(spawned_pokemon_icons)
		display_move_list(message.mon)
		current_move = message.selected_move
	end
	if message_id == hash("hide_pokemon_moves") then
		clear_gos(spawned_moves)
		display_pokemon_grid()
	end
	if message_id == hash("swap_move") then
		msg.post(".", "hide_pokemon_moves")
		swap_move(message.move_id)
		msg.post("gui", "moves_exit")
	end
	if message_id == hash("return_to_main") then
		clear_gos(spawned_pokedex_icons)
		clear_gos(spawned_pokemon_icons)
	end
end

function on_input(self, action_id, action)
	if action.pressed then
		self.drag = true		
		self.current_pos = go.get_position()
		self.pressed_pos = vmath.vector3(self.current_pos.x, action.y, 0)
	elseif action.released then
		self.drag = false
		released_pos = vmath.vector3(self.current_pos.x, action.y, 0)
		drag_distance = vmath.length(released_pos - self.pressed_pos)
		if drag_distance < 20 then
			p = vmath.vector3(action.x, action.y, 0)
			factory.create("#cursor_factory",p)
		end
	end

	if self.drag then
		local pos = self.current_pos - self.pressed_pos + vmath.vector3(self.current_pos.x, action.y, 0)
		go.set_position(limit(self, pos))
	end
end

function on_reload(self)
end

function swap_move(move_id)
	selected_move = 1
	print(move_id)
	--we have to find which of the pokemon's known moves matches the move_id.
	for i, m in ipairs(current_mon.known_moves) do
		if m.id == move_id then
			selected_move = i
		end
	end
	print(selected_move)
	print(current_move)
	print(current_mon[current_move])
	--current_move should contain move1, move2, move3, or move4
	current_mon[current_move] = selected_move
	print(current_mon[current_move])
end

function display_pokedex_grid()
	local p = vmath.vector3()
	p.y = 1000
	p.x = 32

	for i, poke in ipairs(pbs) do
		local icon = factory.create("#pokedex_icon_factory",p, nil, {pokedex = i})
		go.set_parent(icon, go.get_id("menu"))
		table.insert(spawned_pokedex_icons, icon)

		p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
	end
end

function display_pokemon_grid()
	local p = vmath.vector3()
	p.y = 1000
	p.x = 32

	for i, poke in ipairs(game_state.pokemon) do
		local icon = factory.create("#pokemon_icon_factory",p, nil, {mon_id = i})
		go.set_parent(icon, go.get_id("menu"))
		table.insert(spawned_pokemon_icons, icon)

		p.x = p.x + 70 --each image is 64 wide. Also adding a little extra space.
	end
end

function display_move_list(mon)
	local p = vmath.vector3()
	p.y = 900
	p.x = 320

	for i, m in ipairs(mon.known_moves) do
		local move = factory.create("#move_factory",p, nil, {move_index = m.id})
		go.set_parent(move, go.get_id("menu"))
		table.insert(spawned_moves, move)

		p.y = p.y - 100 --each image is 100px tall
	end	
end

function limit(self, pos)
	local top = 100 
	local bottom = 0
	pos.y = math.min(pos.y, top)
	pos.y = math.max(pos.y, bottom)
	return pos
end

function clear_gos(id_table)
	for i, v in ipairs(id_table) do
		go.delete(v)
		id_table[i] = nil
	end
	for i, v in ipairs(id_table) do
		print(v)
	end
end