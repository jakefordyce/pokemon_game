local game_state = require "common/game_state"
local runes = require "common/runes"
local menu_mode = 1 -- 1 buy, 2 sell
local selected_rune = nil
local selected_rune_index = nil

function init(self)
	msg.post(".", "acquire_input_focus")
	gui.set_enabled(gui.get_node("selected_rune_panel"), false)
	gui.set_enabled(gui.get_node("return_to_menu_button"), false)
	game_state.generate_shop_runes()
end

function final(self)
end

function update(self, dt)
end

function on_message(self, message_id, message, sender)
	if message_id == hash("display_rune_details") then
		if menu_mode > 1 then
			selected_rune = game_state.runes[message.rune]
		else
			selected_rune = game_state.shop_runes[message.rune]
		end
		selected_rune_index = message.rune
		gui.set_enabled(gui.get_node("return_to_menu_button"), false)
		gui.set_enabled(gui.get_node("main_shop_panel"), false)
		gui.set_enabled(gui.get_node("selected_rune_panel"), true)
		display_rune_details()
	end
end

function on_input(self, action_id, action)
	if(action_id == hash("touch") and action.pressed == true) then
		--don't start actions if the click started on part of the GUI.
		if(gui.pick_node(gui.get_node("exit_shop_button"),action.x,action.y) and node_enabled(gui.get_node("exit_shop_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("buy_button"),action.x,action.y) and node_enabled(gui.get_node("buy_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("sell_button"),action.x,action.y) and node_enabled(gui.get_node("sell_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_menu_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_menu_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("close_rune_panel_button"),action.x,action.y) and node_enabled(gui.get_node("close_rune_panel_button"))) then
			return true
		end
		if(gui.pick_node(gui.get_node("pay_button"),action.x,action.y) and node_enabled(gui.get_node("pay_button"))) then
			return true
		end
	end
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("exit_shop_button"),action.x,action.y) and node_enabled(gui.get_node("exit_shop_button"))) then
			msg.post("main:/loader#main", "exit_rune_shop")
			return true
		end
		if(gui.pick_node(gui.get_node("buy_button"),action.x,action.y) and node_enabled(gui.get_node("buy_button"))) then
			menu_mode = 1
			gui.set_text(gui.get_node("pay_text"), "Buy")
			msg.post("rune_shop", "display_shop_runes")
			gui.set_enabled(gui.get_node("main_shop_panel"), false)
			gui.set_enabled(gui.get_node("return_to_menu_button"), true)
			return true
		end
		if(gui.pick_node(gui.get_node("sell_button"),action.x,action.y) and node_enabled(gui.get_node("sell_button"))) then
			menu_mode = 2
			gui.set_text(gui.get_node("pay_text"), "Sell")
			msg.post("rune_shop", "display_player_runes", {selling = true})
			gui.set_enabled(gui.get_node("main_shop_panel"), false)
			gui.set_enabled(gui.get_node("return_to_menu_button"), true)
			return true
		end
		if(gui.pick_node(gui.get_node("return_to_menu_button"),action.x,action.y) and node_enabled(gui.get_node("return_to_menu_button"))) then
			gui.set_enabled(gui.get_node("main_shop_panel"), true)
			gui.set_enabled(gui.get_node("return_to_menu_button"), false)
			msg.post("rune_shop", "disable_clicking")
			return true
		end
		if(gui.pick_node(gui.get_node("close_rune_panel_button"),action.x,action.y) and node_enabled(gui.get_node("close_rune_panel_button"))) then
			gui.set_enabled(gui.get_node("selected_rune_panel"), false)
			gui.set_enabled(gui.get_node("return_to_menu_button"), true)
			if menu_mode == 1 then
				msg.post("rune_shop", "enable_clicking")
			elseif menu_mode == 2 then
				msg.post("rune_shop", "display_player_runes", {selling = true})
			end
				
			return true
		end
		if(gui.pick_node(gui.get_node("pay_button"),action.x,action.y) and node_enabled(gui.get_node("pay_button"))) then
			if menu_mode == 1 then
				buy_rune()
			elseif menu_mode == 2 then
				sell_rune()
			end
			
			return true
		end
	end
end

function on_reload(self)
end

function buy_rune()
	cost = runes.buy_price(selected_rune)
	if game_state.player.money >= cost then
		local purchased_rune = {
			slot = selected_rune.slot,
			level = selected_rune.level,
			rarity = selected_rune.rarity,
			main_stat = selected_rune.main_stat,
			equipped_id = nil,
			substat_points = 0,
			substats = {}
		}
		
		table.insert(game_state.runes, purchased_rune)

		game_state.player.money = game_state.player.money - cost
		gui.set_enabled(gui.get_node("selected_rune_panel"), false)
		gui.set_enabled(gui.get_node("return_to_menu_button"), true)
		msg.post("rune_shop", "enable_clicking")
		msg.post("rune_shop", "display_shop_runes")
	end
end

function sell_rune()
	sell_price = runes.sell_price(selected_rune)
	table.remove(game_state.runes, selected_rune_index)
	game_state.fix_pokemon_rune_ids(selected_rune_index)
	game_state.player.money = game_state.player.money + sell_price
	gui.set_enabled(gui.get_node("selected_rune_panel"), false)
	gui.set_enabled(gui.get_node("return_to_menu_button"), true)
	msg.post("rune_shop", "enable_clicking")
	msg.post("rune_shop", "display_player_runes", {selling = true})
end

function display_rune_details()
	gui.play_flipbook(gui.get_node("rune_sprite"), "rune_"..selected_rune.slot.."_"..selected_rune.rarity)
	gui.set_text(gui.get_node("rune_level"), selected_rune.level)
	gui.set_text(gui.get_node("current_money_text"), "Money: $"..game_state.player.money)
	
	if menu_mode == 1 then
		gui.set_text(gui.get_node("cost_text"), "Cost: $"..runes.buy_price(selected_rune))
	elseif menu_mode == 2 then
		gui.set_text(gui.get_node("cost_text"), "Value: $"..runes.sell_price(selected_rune))
	end
	
	value_text = "+ " .. runes.mainstat_value(selected_rune.main_stat, selected_rune.level)
	if selected_rune.main_stat > 6 or selected_rune.main_stat == 4 then
		value_text = value_text .. "%"
	end
	
	gui.set_text(gui.get_node("mainstat_lbl"), runes.stat_names[selected_rune.main_stat])
	gui.set_text(gui.get_node("mainstat"), value_text)
	
	for i=1,5 do
		gui.set_enabled(gui.get_node("substat"..i), false)
	end
	for i,ss in ipairs(selected_rune.substats) do
		value_text = "+ " .. runes.substat_value(ss.stat, ss.rank)
		if ss.stat > 6 or ss.stat == 4 then
			value_text = value_text .. "%"
		end
		gui.set_enabled(gui.get_node("substat"..i), true)
		gui.set_text(gui.get_node("substat"..i.."_lbl"), runes.stat_names[ss.stat])
		gui.set_text(gui.get_node("substat"..i), value_text)
	end

end

function node_enabled(node)
	local parent = gui.get_parent(node)
	local enabled = gui.is_enabled(node)
	if parent then
		return enabled and node_enabled(parent)
	end
	return enabled
end