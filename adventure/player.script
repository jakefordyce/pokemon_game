local speed = 150
local game_state = require "common/game_state"

function init(self)
	msg.post(".", "acquire_input_focus")
	self.dir = vmath.vector3()
	self.last_dir = vmath.vector3()
	self.current_anim = nil
	-- correction vector
	self.correction = vmath.vector3()
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	if vmath.length_sqr(self.dir) > 1 then
		self.dir = vmath.normalize(self.dir)
	end
	local p = go.get_position()
	go.set_position(p + self.dir * speed * dt)


	if self.last_dir.x > 0 then
		anim = hash("idle_right")
	elseif self.last_dir.x < 0 then
		anim = hash("idle_left")
	elseif self.last_dir.y > 0 then
		anim = hash("idle_up")
	else
		anim = hash("idle_down")
	end
	
	if self.dir.x > 0 then
		anim = hash("walk_right")
		self.last_dir = self.dir
	elseif self.dir.x < 0 then
		anim = hash("walk_left")
		self.last_dir = self.dir
	elseif self.dir.y > 0 then
		anim = hash("walk_up")
		self.last_dir = self.dir
	elseif self.dir.y < 0 then
		anim = hash("walk_down")
		self.last_dir = self.dir
	end

	if anim ~= self.current_anim then
		msg.post("#sprite", "play_animation", { id = anim })
		self.current_anim = anim
	end

	-- done animating

	self.dir = vmath.vector3()
	-- reset correction
	self.correction = vmath.vector3()
end

function on_message(self, message_id, message, sender)
	if message_id == hash("button_down") then
		self.dir.y = -1
	elseif message_id == hash("button_up") then
		self.dir.y = 1
	elseif message_id == hash("button_left") then
		self.dir.x = -1
	elseif message_id == hash("button_right") then
		self.dir.x = 1
	end
	-- Handle collisions
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("tall_grass") then
			p = go.get_position()
			game_state.position_x = p.x
			game_state.position_y = p.y
			msg.post("camera", "reset")
			msg.post("main:/loader#main", "load_battle")
		elseif message.other_group == hash("door") then
			--TODO: also load position info
			target = go.get(msg.url(nil, message.other_id, "door"), "target_area")
			msg.post("camera", "reset")
			msg.post("main:/loader#main", "load_area", {target_area = target})
		else --something solid
			-- Get the info needed to move out of collision. We might
			-- get several contact points back and have to calculate
			-- how to move out of all of them by accumulating a
			-- correction vector for this frame:
			if message.distance > 0 then
				-- First, project the accumulated correction onto
				-- the penetration vector
				local proj = vmath.project(self.correction, message.normal * message.distance)
				if proj < 1 then
					-- Only care for projections that does not overshoot.
					local comp = (message.distance - message.distance * proj) * message.normal
					-- Apply compensation
					go.set_position(go.get_position() + comp)
					-- Accumulate correction done
					self.correction = self.correction + comp
				end
			end
		end
	end
end

function on_input(self, action_id, action)
	
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end
