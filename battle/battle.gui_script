local game_state = require "common/game_state"

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post(".", "hide_mon_display")
end

function final(self)
	-- Add finalization code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function update(self, dt)
	-- Add update code here
	-- Learn more: https://defold.com/manuals/script/
	-- Remove this function if not needed
end

function on_message(self, message_id, message, sender)
	local moves = require "common/moves"
	-- Add message-handling code here
	-- Learn more: https://defold.com/manuals/message-passing/
	-- Remove this function if not needed
	if message_id == hash("display_mon") then
		gui.set_text(gui.get_node("current_mon_name"), message.mon.name)
		for i=1,4 do
			if message.mon["move"..i] ~= nil then
				gui.set_enabled(gui.get_node("Move"..i), true)
				gui.set_text(gui.get_node("Move"..i), moves[message.mon.known_moves[message.mon["move"..i]].id].name)
			else
				gui.set_enabled(gui.get_node("Move"..i), false)
			end
		end
		
		
	end
	if message_id == hash("hide_mon_display") then
		gui.set_text(gui.get_node("current_mon_name"), "")
		gui.set_text(gui.get_node("move_description"), "")
		gui.set_enabled(gui.get_node("Move1"), false)
		gui.set_enabled(gui.get_node("Move2"), false)
		gui.set_enabled(gui.get_node("Move3"), false)
		gui.set_enabled(gui.get_node("Move4"), false)
	end
	if message_id == hash("display_move_desc") then
		gui.set_text(gui.get_node("move_description"), message.desc)
	end
	if message_id == hash("update_hp") then
		local current_hp = message.current
		if current_hp > message.max then
			current_hp = message.max
		end
		new_size = vmath.vector3((current_hp / message.max * 100), 10, 0)
		gui.set_size(gui.get_node(message.target.."_health"), new_size)
	end
	if message_id == hash("update_turn") then
		--https://defold.com/ref/stable/gui/#gui.set_size:node-size
		local current_turn = message.current
		if current_turn > message.max then
			current_turn = message.max
		end
		new_size = vmath.vector3((current_turn / message.max * 100), 10, 0)
		gui.set_size(gui.get_node(message.target.."_turn"), new_size)
	end
	if message_id == hash("set_battle_text") then
		gui.set_text(gui.get_node("battle_text"), message.text)
		timer.delay(1, false, remove_battle_text)
	end
	if message_id == hash("disable_mon") then
		gui.set_enabled(gui.get_node(message.mon), false)
	end	
end

-- Learn more: https://defold.com/manuals/input/
function on_input(self, action_id, action)
	local moves = require "common/moves"
	if(action_id == hash("touch") and action.released == true) then
		if(gui.pick_node(gui.get_node("Move1"),action.x,action.y)) then
			mon =  game_state.pokemon[1] -- TODO: change to use current mon
			level = mon.known_moves[mon.move1].level
			gui.set_text(gui.get_node("move_description"), moves[mon.known_moves[mon.move1].id].description(level))
			msg.post("battle", "move_selected", {move = mon.move1})
		elseif(gui.pick_node(gui.get_node("Move2"),action.x,action.y)) then
			mon =  game_state.pokemon[1] -- TODO: change to use current mon
			level = mon.known_moves[mon.move2].level
			gui.set_text(gui.get_node("move_description"), moves[mon.known_moves[mon.move2].id].description(level))
			msg.post("battle", "move_selected", {move = mon.move2})
		elseif(gui.pick_node(gui.get_node("player_mon1"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "player_mon1"})
		elseif(gui.pick_node(gui.get_node("player_mon2"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "player_mon2"})
		elseif(gui.pick_node(gui.get_node("player_mon3"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "player_mon3"})
		elseif(gui.pick_node(gui.get_node("player_mon4"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "player_mon4"})
		elseif(gui.pick_node(gui.get_node("enemy_mon1"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "enemy_mon1"})
		elseif(gui.pick_node(gui.get_node("enemy_mon2"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "enemy_mon2"})
		elseif(gui.pick_node(gui.get_node("enemy_mon3"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "enemy_mon3"})
		elseif(gui.pick_node(gui.get_node("enemy_mon4"),action.x,action.y)) then
			msg.post("battle", "target_selected", {target = "enemy_mon4"})
		end
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Learn more: https://defold.com/manuals/hot-reload/
	-- Remove this function if not needed
end

function remove_battle_text()
	gui.set_text(gui.get_node("battle_text"),"")
end